/*
 * F-35 NOZZLE CONTROLLER
 * Copyright (C) 2020 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

// B0 - IR input
// B4 - power button
// AN0-AN5 - hall sensors
// D7 - LED
// D0-D5 - H bridges

// PORTC is dead on this particular chip


// CONFIG
#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = ON        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)


#include <pic16f877a.h>
#include <stdint.h>
#include <string.h>

// control motors using console input.  Disable if the serial port is floating.
#define TEST_MODE

#define ABS(x) ((x) < 0 ? (-(x)) : (x))

#define CLOCKSPEED 13300000
#define LED_TRIS TRISDbits.TRISD7
#define LED_PORT PORTDbits.RD7

#define HBRIDGE_MASK 0b00111111;
#define HBRIDGE_PORT PORTD
#define HBRIDGE_TRIS TRISD
#define MOTOR2_RIGHT 0b00000010
#define MOTOR2_LEFT  0b00000001
#define MOTOR1_RIGHT 0b00010000
#define MOTOR1_LEFT  0b00100000
#define MOTOR0_RIGHT 0b00001000
#define MOTOR0_LEFT  0b00000100


#define BUTTON_PORT PORTBbits.RB4

uint8_t have_serial = 0;
uint8_t serial_in = 0;
// page 115
#define BAUD_CODE (CLOCKSPEED / 16 / 57600)
uint8_t interrupt_done = 0;

#define UART_BUFSIZE 64
uint8_t uart_buffer[UART_BUFSIZE];
uint16_t uart_size = 0;
uint16_t uart_position1 = 0;
uint16_t uart_position2 = 0;

// motors are armed
uint8_t armed = 0;
uint8_t led_counter = 0;
// mane timer fires at 10Hz
#define HZ 100
#define TIMER1_VALUE (-CLOCKSPEED / 4 / 8 / HZ)
#define LED_DELAY (HZ / 2)

uint8_t got_tick = 0;
uint8_t tick = 0;

// current state of the home operation
uint8_t current_motor = 0;


// copy of H bridge pins written by the user
uint8_t motor_master = 0;
// ticks to wait for a motor to stop
#define MOTOR_DELAY (HZ / 2)



uint8_t current_adc = 0;
#define ADCON0_MASK 0b10000001
#define TOTAL_ADC 6
#define TOTAL_MOTORS 3
#define BOUNDARY0 1 // nearest motor
#define BOUNDARY1 2
#define BOUNDARY2 5 // farthest motor
#define ENCODER0 0 // nearest motor
#define ENCODER1 3
#define ENCODER2 4 // farthest motor
// amount above or below 0x80
#define SENSOR_THRESHOLD 0x20

// home positions
#define HOME0 22
#define HOME1 15
#define HOME2 8

typedef struct 
{
// analog value
    uint8_t analog;
// last detected direction
    uint8_t ns;
// add or subtract steps from position if an encoder
    int8_t step;
// absolute position if an encoder
    int8_t position;
} sensor_state_t;
sensor_state_t sensors[TOTAL_ADC];

typedef struct
{
// ADC of the sensors
    uint8_t boundary;
    uint8_t encoder;
// H bridge bitmasks of the 2 directions
    uint8_t dec_mask; // go towards boundary
    uint8_t inc_mask; // go away from boundary
    uint8_t total_unmask; // coasting
    uint8_t total_mask; // breaking

// ticks remaneing to sleep
    uint8_t timer;
    int8_t target_position;
} tracking_state_t;
tracking_state_t tracking_state[TOTAL_MOTORS];

// IR code follows.  Based on heroineclock 2
typedef struct
{
    const int16_t *data;
	const uint8_t size;
    const uint8_t value;
} ir_code_t;

// remote control codes
const int16_t up_data[] = 
{ 
    0x0730, 0x03cc, 0x0074, 0x006f, 0x0078, 0x015b, 0x0079, 0x0073,
    0x0074, 0x015b, 0x0079, 0x0157, 0x007d, 0x015b, 0x0078, 0x015b,
    0x0078, 0x006f, 0x0077, 0x015b, 0x0079, 0x0073, 0x0074, 0x015f,
    0x0074, 0x006f, 0x0078, 0x0073, 0x0074, 0x0073, 0x0074, 0x0073,
    0x0075, 0x015e, 0x0074, 0x0073, 0x0074, 0x006f, 0x0078, 0x0074,
    0x0075, 0x015d, 0x0075, 0x015b, 0x0077, 0x0073, 0x0074, 0x015c,
    0x0077, 0x0073, 0x0074, 0x015d, 0x0076, 0x015c, 0x0077, 0x015f,
    0x0074, 0x0070, 0x0077, 0x0074, 0x0074, 0x015e, 0x0075, 0x006e,
    0x0078, 0x0156, 0x007e, 0x2063, 0x0734, 0x01c6, 0x007a
};

const int16_t down_data[] = 
{ 
    0x0737, 0x03c3, 0x0079, 0x006e, 0x0079, 0x0155, 0x007e, 0x0071,
    0x0077, 0x015b, 0x0077, 0x015a, 0x0079, 0x015c, 0x0078, 0x0155,
    0x007e, 0x006a, 0x007d, 0x015f, 0x0075, 0x006a, 0x007d, 0x015a,
    0x0079, 0x0073, 0x0074, 0x0073, 0x0075, 0x006d, 0x007a, 0x0072,
    0x0075, 0x015b, 0x0077, 0x0156, 0x007d, 0x006a, 0x007d, 0x006c,
    0x007b, 0x0155, 0x007e, 0x0159, 0x007b, 0x0068, 0x007e, 0x015b,
    0x0078, 0x0070, 0x0077, 0x006e, 0x0079, 0x0157, 0x007c, 0x015c,
    0x0078, 0x0073, 0x0074, 0x006b, 0x007e, 0x015a, 0x0078, 0x006f,
    0x0077, 0x015c, 0x0078, 0x2068, 0x0730, 0x01c1, 0x007a
};

const int16_t left_data[] =  
{  
    0x0730, 0x03c7, 0x0078, 0x0073, 0x0075, 0x015a, 0x0079, 0x006e, 0x007a,
    0x015b, 0x0077, 0x015b, 0x0078, 0x015a, 0x0079, 0x015e, 0x0075, 0x0073,
    0x0075, 0x015a, 0x0078, 0x006b, 0x007c, 0x015a, 0x0079, 0x006e, 0x0079,
    0x006e, 0x0079, 0x006e, 0x007a, 0x006a, 0x007d, 0x015a, 0x0078, 0x015f,
    0x0074, 0x0158, 0x007b, 0x006f, 0x0078, 0x006f, 0x0078, 0x015b, 0x0078,
    0x006f, 0x0078, 0x015a, 0x0079, 0x0073, 0x0074, 0x006f, 0x0079, 0x0068,
    0x007e, 0x015d, 0x0076, 0x015b, 0x0078, 0x006f, 0x0078, 0x015b, 0x0079,
    0x006f, 0x0078, 0x0157, 0x007c, 0x2063, 0x0736, 0x01bf, 0x007a  
};

const int16_t right_data[] = 
{ 
    0x072f, 0x03c6, 0x0078, 0x0063, 0x0084,
    0x0155, 0x007e, 0x0073, 0x0075, 0x015e, 0x0075, 0x0156, 0x007d, 
    0x0154, 0x007e, 0x0157, 0x007d, 0x006f, 0x0078, 0x0156, 0x007c, 
    0x006f, 0x0079, 0x015f, 0x0074, 0x0072, 0x0075, 0x0070, 0x0077, 
    0x0073, 0x0074, 0x0070, 0x0077, 0x015b, 0x0078, 0x006b, 0x007e, 
    0x0159, 0x0079, 0x0073, 0x0074, 0x006b, 0x007d, 0x015a, 0x0079, 
    0x006e, 0x0079, 0x015a, 0x0078, 0x006b, 0x007c, 0x015b, 0x0078, 
    0x0072, 0x0076, 0x015b, 0x0077, 0x0157, 0x007c, 0x006e, 0x0079, 
    0x015e, 0x0074, 0x0072, 0x0075, 0x015b, 0x0078, 0x205d, 0x073a, 
    0x01c7, 0x007a 
};

const int16_t power_data[] = 
{
    0x072e, 0x03c3, 0x007d, 0x006f, 0x0078, 0x0157, 0x007e, 0x0069,
    0x007c, 0x015f, 0x0074, 0x015c, 0x0078, 0x015f, 0x0074, 0x015f,
    0x0076, 0x0071, 0x0074, 0x015b, 0x0078, 0x0073, 0x0074, 0x015b,
    0x0078, 0x0070, 0x0077, 0x0073, 0x0074, 0x0070, 0x0079, 0x0071,
    0x0074, 0x0156, 0x007d, 0x006f, 0x0078, 0x0073, 0x0074, 0x015a,
    0x0079, 0x015b, 0x0079, 0x015b, 0x0078, 0x0073, 0x0074, 0x006f,
    0x0079, 0x0159, 0x0079, 0x0156, 0x007d, 0x015f, 0x0074, 0x0073,
    0x0074, 0x006e, 0x0079, 0x0073, 0x0075, 0x015a, 0x0079, 0x015b,
    0x0079, 0x006f, 0x007a, 0x2066, 0x0730, 0x01c6, 0x0079
};

// remote control buttons to enums
#define UP 0
#define DOWN 1
#define LEFT 2
#define RIGHT 3
#define POWER 4

const ir_code_t ir_codes[] = { 
    { up_data,      sizeof(up_data) / 2,      UP },
	{ down_data,  sizeof(down_data) / 2,  DOWN },
	{ left_data,  sizeof(left_data) / 2,  LEFT },
	{ right_data, sizeof(right_data) / 2, RIGHT },
    { power_data, sizeof(power_data) / 2, POWER },
};

#define IR_MARGIN 16
// based on how long IR goes without an interrupt when the key is pressed
#define IR_TIMEOUT 21280
#define TOTAL_CODES (sizeof(ir_codes) / sizeof(ir_code_t))

// which codes have matched all bytes received so far
// 0 if matched all bytes  1 if failed
uint8_t ir_code_failed[TOTAL_CODES];
uint8_t ir_offset = 0;
// IR is transmitting repeats
uint8_t have_ir = 0;
// last IR code received
uint8_t ir_code = 0;

// IR interrupt fired
volatile uint8_t got_ir_int = 0;
// time of IR interrupt in us / 4
int16_t ir_time = 0;
// software defined high byte of IR timer
uint8_t tmr2_high = 0;
// time in interrupt handler
volatile uint16_t ir_time2 = 0;
uint8_t first_edge = 1;


void print_byte(uint8_t c)
{
	if(uart_size < UART_BUFSIZE)
	{
		uart_buffer[uart_position1++] = c;
		uart_size++;
		if(uart_position1 >= UART_BUFSIZE)
		{
			uart_position1 = 0;
		}
	}
}

void print_text(const uint8_t *s)
{
	while(*s != 0)
	{
		print_byte(*s);
		s++;
	}
}


void print_number_nospace(uint16_t number)
{
	if(number >= 10000) print_byte('0' + (number / 10000));
	if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
	if(number >= 100) print_byte('0' + ((number / 100) % 10));
	if(number >= 10) print_byte('0' + ((number / 10) % 10));
	print_byte('0' + (number % 10));
}

void print_number2(uint8_t number)
{
	print_byte('0' + ((number / 10) % 10));
	print_byte('0' + (number % 10));
}

void print_number(uint16_t number)
{
    print_number_nospace(number);
   	print_byte(' ');
 
}

const char hex_table[] = 
{
	'0', '1', '2', '3', '4', '5', '6', '7', 
	'8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
};

void print_hex2(uint8_t number)
{
	print_byte(hex_table[(number >> 4) & 0xf]);
	print_byte(hex_table[number & 0xf]);
}

void print_bin(uint8_t number)
{
	print_byte((number & 0x80) ? '1' : '0');
	print_byte((number & 0x40) ? '1' : '0');
	print_byte((number & 0x20) ? '1' : '0');
	print_byte((number & 0x10) ? '1' : '0');
	print_byte((number & 0x8) ? '1' : '0');
	print_byte((number & 0x4) ? '1' : '0');
	print_byte((number & 0x2) ? '1' : '0');
	print_byte((number & 0x1) ? '1' : '0');
}


// send a UART char
void handle_uart()
{
    if(uart_size > 0 && PIR1bits.TXIF)
    {
        PIR1bits.TXIF = 0;
        TXREG = uart_buffer[uart_position2++];
		uart_size--;
		if(uart_position2 >= UART_BUFSIZE)
		{
			uart_position2 = 0;
		}
    }
}

void flush_uart()
{
    while(uart_size > 0)
    {
        asm("clrwdt");
        handle_uart();
    }
}

// motor state machine

void motor_idle();
void motor_home1();
void (*motor_state)() = motor_idle;


void motor_tracking()
{
    uint8_t i;
    for(i = 0; i < TOTAL_MOTORS; i++)
    {
        tracking_state_t *tracking = &tracking_state[i];
        sensor_state_t *encoder = &sensors[tracking->encoder];

// motor moving
        if((motor_master & tracking->total_mask) == tracking->inc_mask)
        {
            if(encoder->position >= tracking->target_position)
            {
                motor_master |= tracking->total_mask;
                tracking->timer = MOTOR_DELAY;
            }
        }
        else
        if((motor_master & tracking->total_mask) == tracking->dec_mask)
        {
            if(encoder->position <= tracking->target_position)
            {
                motor_master |= tracking->total_mask;
                tracking->timer = MOTOR_DELAY;
            }
        }
        else
// waiting for next command
        if(tracking->timer == 0)
        {

            if(encoder->position > tracking->target_position)
            {
                encoder->step = -1;
                motor_master &= tracking->total_unmask;
                motor_master |= tracking->dec_mask;
            }
            else
            if(encoder->position < tracking->target_position)
            {
                encoder->step = 1;
                motor_master &= tracking->total_unmask;
                motor_master |= tracking->inc_mask;
            }
        }
    }
}

// wait a while
void motor_home6()
{
    tracking_state_t *tracking = &tracking_state[current_motor];
    if(tracking->timer == 0)
    {
        uint8_t current_encoder = tracking->encoder;
        print_text("motor=");
        print_number(sensors[current_encoder].position);
        print_text("\n");

        switch(current_motor)
        {
            case 2:
                current_motor = 1;
                motor_state = motor_home1;
                break;
            case 1:
                current_motor = 0;
                motor_state = motor_home1;
                break;
            case 0:
            default:
                motor_state = motor_tracking;
                break;
        }
    }
}

// count until home position
void motor_home5()
{
    tracking_state_t *tracking = &tracking_state[current_motor];
    uint8_t current_encoder = tracking->encoder;
    if(sensors[current_encoder].position >= 
        tracking_state[current_motor].target_position)
    {
        motor_master |= tracking->total_mask;
        tracking->timer = MOTOR_DELAY;
        motor_state = motor_home6;
    }
}

// go until boundary is detected again
void motor_home4()
{
    tracking_state_t *tracking = &tracking_state[current_motor];
    uint8_t current_boundary = tracking->boundary;
    uint8_t sensor_value = sensors[current_boundary].analog;
    if(ABS(sensor_value - 0x80) >= SENSOR_THRESHOLD)
    {
        uint8_t current_encoder = tracking->encoder;
        sensors[current_encoder].position = 0;
        sensors[current_encoder].step = 1;
        motor_state = motor_home5;
    }
}

// wait a while
void motor_home3()
{
    tracking_state_t *tracking = &tracking_state[current_motor];
    if(tracking->timer == 0)
    {
        motor_master &= tracking->total_unmask;
        motor_master |= tracking->inc_mask;
        motor_state = motor_home4;
    }
}

// detect motor boundary & overshoot
void motor_home2()
{
    tracking_state_t *tracking = &tracking_state[current_motor];
    uint8_t current_boundary = tracking->boundary;
    uint8_t sensor_value = sensors[current_boundary].analog;
    if(ABS(sensor_value - 0x80) >= SENSOR_THRESHOLD)
    {
        motor_master |= tracking->total_mask;
        motor_state = motor_home3;
        tracking->timer = MOTOR_DELAY;
    }
}

// go to home position
void motor_home1()
{
    tracking_state_t *tracking = &tracking_state[current_motor];
    uint8_t current_boundary = tracking->boundary;
    uint8_t sensor_value = sensors[current_boundary].analog;
// sensor is already on boundary.  Abort.
    if(ABS(sensor_value - 0x80) >= SENSOR_THRESHOLD)
    {
        motor_state = motor_idle;
    }
    else
// command motor to move to boundary
    {
        motor_master &= tracking->total_unmask;
        motor_master |= tracking->dec_mask;
        motor_state = motor_home2;
    }
}

void motor_idle()
{
}

void arm_motors()
{
    armed = 1;
    LED_PORT = 1;
    current_motor = 2;

    tracking_state[2].target_position = HOME2;
    tracking_state[2].boundary = BOUNDARY2;
    tracking_state[2].encoder = ENCODER2;
    tracking_state[2].dec_mask = MOTOR2_RIGHT;
    tracking_state[2].inc_mask = MOTOR2_LEFT;
    tracking_state[2].total_unmask = ~(MOTOR2_LEFT | MOTOR2_RIGHT);
    tracking_state[2].total_mask = MOTOR2_LEFT | MOTOR2_RIGHT;

    tracking_state[1].target_position = HOME1;
    tracking_state[1].boundary = BOUNDARY1;
    tracking_state[1].encoder = ENCODER1;
    tracking_state[1].dec_mask = MOTOR1_LEFT;
    tracking_state[1].inc_mask = MOTOR1_RIGHT;
    tracking_state[1].total_unmask = ~(MOTOR1_LEFT | MOTOR1_RIGHT);
    tracking_state[1].total_mask = MOTOR1_LEFT | MOTOR1_RIGHT;

    tracking_state[0].target_position = HOME0;
    tracking_state[0].boundary = BOUNDARY0;
    tracking_state[0].encoder = ENCODER0;
    tracking_state[0].dec_mask = MOTOR0_RIGHT;
    tracking_state[0].inc_mask = MOTOR0_LEFT;
    tracking_state[0].total_unmask = ~(MOTOR0_LEFT | MOTOR0_RIGHT);
    tracking_state[0].total_mask = MOTOR0_LEFT | MOTOR0_RIGHT;

    motor_state = motor_home1;
}

void disarm_motors()
{
    armed = 0;
    HBRIDGE_PORT &= ~HBRIDGE_MASK;
    motor_state = motor_idle;
}


void handle_ir_code()
{
// uncomment this to capture the IR codes
// send binary to save serial port space & see if the length is consistent
// DEBUG
// print_byte((ir_time >> 8) & 0xff);
// print_byte(ir_time & 0xff);
// return;



// biggest error encountered in code.  Only works if testing a single code.
	uint16_t ir_error = 0;
    uint8_t ir_error_offset = 0;
    uint8_t ir_received_value = 0;

// search for the code
	uint8_t i, j;
// test all bytes so far against every code
	uint8_t got_it = 0;
	for(j = 0; j < TOTAL_CODES; j++)
//	for(j = 0; j < 1; j++)
	{
// code has matched all previous bytes
		if(!ir_code_failed[j])
		{
			const ir_code_t *code = &ir_codes[j];
			const int16_t *data = code->data;
			uint8_t code_size = code->size;
			uint8_t failed = 0;
			ir_error = 0;
            ir_error_offset = 0;
            ir_received_value = 0;

// test latest byte
			int16_t error = ABS(data[ir_offset] - ir_time);
			if(error > ir_error)
			{
				ir_error = error;
                ir_error_offset = ir_offset;
                ir_received_value = ir_time;
			}

// reject code if latest byte doesn't match
			if(error > IR_MARGIN)
			{
// 	 			print_byte('\n');
// 

// 				print_number_nospace(data[ir_offset]);
// 				print_text(" != ");
// 				print_number_nospace(ir_time);
// 				print_text(" ");
//   			print_text("failed at ir_offset=");
// 				print_number(ir_offset);
// 				print_byte('\n');

// don't search this code anymore
				ir_code_failed[j] = 1;
			}
			else
// all bytes so far matched the current code
			{
				ir_offset++;

// complete code was received
				if(ir_offset >= code_size)
				{
// reset the code search
					ir_offset = 0;
					for(i = 0; i < TOTAL_CODES; i++)
					{
						ir_code_failed[i] = 0;
					}

					have_ir = 1;
					ir_code = code->value;
					print_text("IR code: ");
					print_number(code->value);
					print_text("error=");
					print_number(ir_error);
					print_text("ir_error_offset=");
					print_number(ir_error_offset);
					print_text("ir_received_value=");
					print_hex2(ir_received_value >> 8);
					print_hex2(ir_received_value & 0xff);
					print_byte('\n');

// handle the code
					switch(code->value)
					{
                        case UP:
                            break;
                        case DOWN:
                            break;
                        case LEFT:
                            break;
                        case RIGHT:
                            break;
                        case POWER:
                            if(!armed)
                            {
                                arm_motors();
                            }
                            else
                            {
                                disarm_motors();
                            }
                            break;
					}
				}

// exit the code search
				got_it = 1;
				break;
			}
		}
	}

// no partial code was found, so discard
	if(!got_it)
	{
//print_text("no matches\n");
		ir_offset = 0;
		for(i = 0; i < TOTAL_CODES; i++)
		{
			ir_code_failed[i] = 0;
		}
	}
}

void handle_ir()
{
    uint8_t i;
// IR timed out
    uint16_t test_time = ((uint16_t)tmr2_high) << 8;
    if(test_time > IR_TIMEOUT &&
        !first_edge)
    {
        print_text("IR timed out\n");

// reset the timer
    	INTCONbits.GIE = 0;
// use falling edge.  page 25
        OPTION_REGbits.INTEDG = 0;
		TMR2 = 0;
        PIR1bits.TMR2IF = 0;
    	INTCONbits.GIE = 1;

		ir_offset = 0;
		for(i = 0; i < TOTAL_CODES; i++)
		{
			ir_code_failed[i] = 0;
		}
        first_edge = 1;
		have_ir = 0;
        got_ir_int = 0;
    }

	if(got_ir_int)
	{
        got_ir_int = 0;
// reverse edge
		OPTION_REGbits.INTEDG = !OPTION_REGbits.INTEDG;
		ir_time = ir_time2;
    	if(first_edge)
    	{
        	first_edge = 0;
    	}
    	else
    	{
 			handle_ir_code();
    	}
	}
}


void charge_adc();
void (*adc_state)() = charge_adc;

void capture_adc()
{
    if(PIR1bits.ADIF)
    {
        sensor_state_t *sensor = &sensors[current_adc];
        sensor->analog = ADRESH;
        if(sensor->ns == 0 && 
            sensor->analog >= 0x80 + SENSOR_THRESHOLD)
        {
            sensor->ns = 1;
            sensor->position += sensor->step;
        }
        else
        if(sensor->ns == 1 &&
            sensor->analog < 0x80 - SENSOR_THRESHOLD)
        {
            sensor->ns = 0;
            sensor->position += sensor->step;
        }

        current_adc++;
        if(current_adc >= TOTAL_ADC)
        {
            current_adc = 0;
            
//             if(uart_size == 0)
//             {
//                 print_hex2(sensor_values[0]);
//                 print_text(" ");
//                 print_hex2(sensor_values[1]);
//                 print_text(" ");
//                 print_hex2(sensor_values[2]);
//                 print_text(" ");
//                 print_hex2(sensor_values[3]);
//                 print_text(" ");
//                 print_hex2(sensor_values[4]);
//                 print_text(" ");
//                 print_hex2(sensor_values[5]);
//                 print_text("\n");
//             }
        }
        
        switch(current_adc)
        {
            case 0:
                ADCON0 = ADCON0_MASK | 0b00000000;
                break;
            case 1:
                ADCON0 = ADCON0_MASK | 0b00001000;
                break;
            case 2:
                ADCON0 = ADCON0_MASK | 0b00010000;
                break;
            case 3:
                ADCON0 = ADCON0_MASK | 0b00011000;
                break;
            case 4:
                ADCON0 = ADCON0_MASK | 0b00100000;
                break;
            case 5:
                ADCON0 = ADCON0_MASK | 0b00101000;
                break;
        }
        
        TMR0 = 0;
        INTCONbits.TMR0IF = 0;
        adc_state = charge_adc;
    }
}

void charge_adc()
{
    if(INTCONbits.TMR0IF)
    {
        INTCONbits.TMR0IF;
        PIR1bits.ADIF = 0;
        ADCON0bits.GO = 1;
        adc_state = capture_adc;
    }
}

#ifdef TEST_MODE

void menu()
{
    print_text("1/2 - motor 0 direct drive\n");
    flush_uart();
    print_text("3/4 - motor 1 direct drive\n");
    flush_uart();
    print_text("5/6 - motor 2 direct drive\n");
    flush_uart();
    print_text("q/a - motor 0 tracking (");
    print_number(tracking_state[0].target_position);
    print_text(")\n");
    flush_uart();
    print_text("w/s - motor 1 tracking (");
    print_number(tracking_state[1].target_position);
    print_text(")\n");
    flush_uart();
    print_text("e/d - motor 2 tracking (");
    print_number(tracking_state[2].target_position);
    print_text(")\n");
    flush_uart();
    print_text("SPACE - stop\n");
    
}

void handle_menu()
{
    if(have_serial)
    {
        have_serial = 0;
        switch(serial_in)
        {
            case '1':
                armed = 1;
                motor_master &= ~MOTOR0_RIGHT;
                motor_master |= MOTOR0_LEFT;
                menu();
                break;
            case '2':
                armed = 1;
                motor_master &= ~MOTOR0_LEFT;
                motor_master |= MOTOR0_RIGHT;
                menu();
                break;
            case '3':
                armed = 1;
                motor_master &= ~MOTOR1_RIGHT;
                motor_master |= MOTOR1_LEFT;
                menu();
                break;
            case '4':
                armed = 1;
                motor_master &= ~MOTOR1_LEFT;
                motor_master |= MOTOR1_RIGHT;
                menu();
                break;
            case '5':
                armed = 1;
                motor_master &= ~MOTOR2_RIGHT;
                motor_master |= MOTOR2_LEFT;
                menu();
                break;
            case '6':
                armed = 1;
                motor_master &= ~MOTOR2_LEFT;
                motor_master |= MOTOR2_RIGHT;
                menu();
                break;

            case 'q':
                tracking_state[0].target_position++;
                menu();
                break;

            case 'a':
                tracking_state[0].target_position--;
                menu();
                break;

            case 'w':
                tracking_state[1].target_position++;
                menu();
                break;

            case 's':
                tracking_state[1].target_position--;
                menu();
                break;

            case 'e':
                tracking_state[2].target_position++;
                menu();
                break;

            case 'd':
                tracking_state[2].target_position--;
                menu();
                break;

            case ' ':
            default:
                disarm_motors();
                menu();
                break;
        }
    }
}
#endif // TEST_MODE

void handle_pwm()
{
//     if((tick % 3) == 0)
//     {
        uint8_t prev_port = HBRIDGE_PORT & ~HBRIDGE_MASK;
        HBRIDGE_PORT = prev_port | motor_master;
//     }
//     else
//     {
//         HBRIDGE_PORT &= motor_master ^ 0xff;
//     }
}

void interrupt isr()
{
    interrupt_done = 0;
    while(!interrupt_done)
    {
        interrupt_done = 1;

// mane timer
        if(PIR1bits.TMR1IF)
        {
            PIR1bits.TMR1IF = 0;
            TMR1 = TIMER1_VALUE;
            got_tick = 1;
            handle_pwm();
            interrupt_done = 0;
        }

// UART receive
        if(PIR1bits.RCIF)
        {
            PIR1bits.RCIF = 0;
            serial_in = RCREG;
            have_serial = 1;
			interrupt_done = 0;
        }

// manage the IR timer
        if(PIR1bits.TMR2IF)
        {
            PIR1bits.TMR2IF = 0;
            tmr2_high++;
            interrupt_done = 0;
        }

// IR interrupt
		if(INTCONbits.INTF)
		{
			INTCONbits.INTF = 0;
// copy the hardware timer value
			ir_time2 = TMR2;
// reset the timer
			TMR2 = 0;
            PIR1bits.TMR2IF = 0;

// copy the software timer value
			ir_time2 |= ((uint16_t)tmr2_high) << 8;
            tmr2_high = 0;
			got_ir_int = 1;
			interrupt_done = 0;
		}
    }
}

void main()
{
	uint8_t i;
    LED_PORT = 1;
    LED_TRIS = 0;

    HBRIDGE_PORT &= ~HBRIDGE_MASK;
    HBRIDGE_TRIS &= ~HBRIDGE_MASK;

    have_serial = 0;
    SPBRG = BAUD_CODE;
// page 113
    TXSTA = 0b00100100;
// page 114
    RCSTA = 0b10010000;
    PIE1bits.RCIE = 1;

// power button pullup page 25
    OPTION_REGbits.nRBPU = 0;
    PORTBbits.RB4 = 1;

// enable IR interrupt page 26
    INTCONbits.INTE = 1;
    INTCONbits.INTF = 0;
// use falling edge.  page 25
    OPTION_REGbits.INTEDG = 0;
	ir_offset = 0;
    first_edge = 1;

// IR timer. 16x prescale. page 63
    T2CON = 0b00000111;
// timer period
    PR2 = 0xff;
    PIR1bits.TMR2IF = 0;
    PIE1bits.TMR2IE = 1;



// enable mane timer.  8:1 prescale  
    T1CON = 0b00110001;
    TMR1 = TIMER1_VALUE;

    memset(sensors, 0, sizeof(sensor_state_t) * TOTAL_ADC);

// enable ADC page 129
    ADCON0 = ADCON0_MASK;
// page 130
    ADCON1 = 0b01001001;
// ADC timer page 56
    OPTION_REGbits.T0CS = 0;
    TMR0 = 0;
    INTCONbits.TMR0IF = 0;



// enable all interrupts page 26
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;

	print_text("\n\n\n\nWelcome to F-35 nozzle\n");

#ifdef TEST_MODE
    menu();
#endif // TEST_MODE


    while(1)
    {
        asm("clrwdt");

// turn off all motors
        if(!armed)
        {
            motor_master &= ~HBRIDGE_MASK;
        }
        else
        {
            LED_PORT = 1;
        }

// send a UART char
        handle_uart();

// receive UART char
#ifdef TEST_MODE
        handle_menu();
#endif // TEST_MODE

// mane timer fired
        if(got_tick)
        {
            got_tick = 0;
            for(i = 0; i < TOTAL_MOTORS; i++)
            {
                tracking_state_t *tracking = &tracking_state[i];
                if(tracking->timer > 0)
                {
                    tracking->timer--;
                }
            }
            tick++;

// flash LED if disarmed
            if(!armed)
            {
                led_counter++;
                if(led_counter >= LED_DELAY)
                {
            
//                    print_bin(PORTD);
//                    print_text("\n");
                    
                    led_counter = 0;
                    LED_PORT = !LED_PORT;
                }
            }
        }


        handle_ir();



// probe hall effect sensors
        adc_state();


        motor_state();
    }

}




