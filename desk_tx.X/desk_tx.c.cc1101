/*
 * CC1101 Transmitter for remote controlled desk.
 *
 * Copyright (C) 2023 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */

// CONFIG1
#pragma config FOSC = INTOSC    // Oscillator Selection Bits (INTOSC oscillator: I/O function on CLKIN pin)
#pragma config WDTE = ON        // Watchdog Timer Enable (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable
#pragma config MCLRE = ON       // MCLR Pin Function Select (MCLR/VPP pin function is MCLR)
#pragma config CP = OFF         // Flash Program Memory Code Protection (Program memory code protection is disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable (Brown-out Reset enabled)
#pragma config CLKOUTEN = OFF   // Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)
#pragma config IESO = ON        // Internal/External Switchover Mode (Internal/External Switchover Mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enable (Fail-Safe Clock Monitor is enabled)

// CONFIG2
#pragma config WRT = OFF        // Flash Memory Self-Write Protection (Write protection off)
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will cause a Reset)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
#pragma config LPBOR = OFF      // Low-Power Brown Out Reset (Low-Power BOR is disabled)
#pragma config LVP = OFF        // Low-Voltage Programming Enable (High-voltage on MCLR/VPP must be used for programming)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>


#include <pic16f1508.h>
#include <stdint.h>
#include <string.h>
#include "desk_tx.h"
#include "cc1101.h"



#define LED_LAT LATC0
#define LED_TRIS TRISC0
#define DEBUG_TRIS TRISC1
#define DEBUG_LAT LATC1


#define CLOCKSPEED 2000000
// debug rate is 1200 baud
#define TIMER1_VALUE -(CLOCKSPEED / 4 / 1200 - 1)

#define TIMER0_VALUE -(CLOCKSPEED / 4 / 256 / 20 - 1)


// debug UART
#define UART_BUFSIZE 64
uint8_t uart_buffer[UART_BUFSIZE];
uint8_t uart_size = 0;
uint8_t uart_position1 = 0;
uint8_t uart_position2 = 0;
uint8_t uart_out = 0;
uint8_t uart_counter = 0;
uint8_t uart_ready = 1;
void uart_start();
void (*uart_state)() = uart_start;

// hardware UART
#define IR_BUFSIZE 16
uint8_t ir_buffer[IR_BUFSIZE];
uint8_t ir_size = 0;
uint8_t ir_position1 = 0;
uint8_t ir_position2 = 0;

// send a char on the hardware UART
void handle_ir()
{
// must use TRMT instead of TXIF on the 16F1508
    if(ir_size > 0 && TRMT)
    {
        TXREG = ir_buffer[ir_position2++];
		ir_size--;
		if(ir_position2 >= IR_BUFSIZE)
		{
			ir_position2 = 0;
		}
    }
}

void send_ir(uint8_t c)
{
	if(ir_size < IR_BUFSIZE)
	{
		ir_buffer[ir_position1++] = c;
		ir_size++;
		if(ir_position1 >= IR_BUFSIZE)
		{
			ir_position1 = 0;
		}
	}
}


// send a char on the software UART
void handle_uart()
{
    if(uart_size > 0 && uart_ready)
    {
        uart_out = uart_buffer[uart_position2++];
        if(uart_position2 >= UART_BUFSIZE) uart_position2 = 0;
        uart_size--;
        uart_ready = 0;
    }
}


void send_uart(uint8_t c)
{
	if(uart_size < UART_BUFSIZE)
	{
		uart_buffer[uart_position1++] = c;
		uart_size++;
		if(uart_position1 >= UART_BUFSIZE)
		{
			uart_position1 = 0;
		}
	}
}

static uint16_t number;
static int force;
void print_digit(uint16_t place)
{
	if(number >= place || force)
	{ 
		force = 1; 
		send_uart('0' + number / place); 
		number %= place; 
	}
}

void print_number(uint16_t number_arg)
{
	number = number_arg;
	force = 0;
	print_digit(10000000);
	print_digit(1000000);
	print_digit(100000);
	print_digit(10000);
	print_digit(1000);
	print_digit(100);
	print_digit(10);
	send_uart('0' + (number % 10)); 
	send_uart(' ');
}

void print_text(const uint8_t *s)
{
	while(*s != 0)
	{
		send_uart(*s);
		s++;
	}
}

void main()
{
// 250khz internal clock
//    OSCCON = 0b00110000;
// 2 Mhz internal clock
    OSCCON = 0b01100000;


    ANSELA = 0;
    ANSELB = 0;
// analog hall effect
    ANSELC = 0x00000100;
// enable pullups
    nWPUEN = 0;
    WPUA = 0xff;
    WPUB = 0xff;

// debug UART
    DEBUG_TRIS = 0;
    DEBUG_LAT = 1;
    T1CON = 0b00000001;
    TMR1IF = 0;
    TMR1IE = 1;
    TMR1 = TIMER1_VALUE;

// packet timer
    OPTION_REG = 0b00000111;
    TMR0 = TIMER0_VALUE;    



// start transmitting
    init_cc1101();
    cc1101_transmitter();
//    cc1101_receiver();

// ADC
// AN6 input
    ADCON0 = 0b00011001;
    ADCON1 = 0b11100000;
    GO = 1;


// serial port
    TXSTA = 0b00100100;
// disable receive
    RCSTA = 0b10000000;
    BAUDCON = 0b00001000;
// 4000 baud at 2Mhz
    SPBRG = (CLOCKSPEED / 4 / 4000 - 1);


    LED_TRIS = 0;
    LED_LAT = 1;

//    print_text("Welcome to desk TX\n");

// get unique ID from flash
#define ADDRESS 0x0f80
    PMADRL = ADDRESS & 0x80;
    PMADRH = ADDRESS >> 8;
    PMCON1bits.CFGS = 0;
    PMCON1bits.RD = 1;
    asm("nop");
    asm("nop");
    uint8_t id = PMDATL;
    uint8_t id2 = id + 1;

// erase flash
    PMCON1bits.CFGS = 0;
    PMCON1bits.FREE = 1;
    PMCON1bits.WREN = 1;

    PMCON2 = 0x55;
    PMCON2 = 0xaa;
    PMCON1bits.WR = 1;
    asm("nop");
    asm("nop");
    PMCON1bits.WREN = 0;

// write new ID
    PMCON1bits.CFGS = 0;
    PMCON1bits.WREN = 1;
    PMCON1bits.LWLO = 1;
    PMDATL = id2;
    PMDATH = id2;
    PMCON2 = 0x55;
    PMCON2 = 0xaa;
    PMCON1bits.WR = 1;
    asm("nop");
    asm("nop");


    PMCON1bits.LWLO = 0;
    PMCON2 = 0x55;
    PMCON2 = 0xaa;
    PMCON1bits.WR = 1;
    asm("nop");
    asm("nop");
    PMCON1bits.WREN = 0;

//print_number(id);
//print_text("\n");    


// enable interrupts
    PEIE = 1;
    GIE = 1;

    uint8_t offset = 0;
    uint32_t analog_accum = 0;
    uint16_t analog_total = 0;
    uint16_t analog_result = 0;
    uint8_t have_analog = 0;
#define ANALOG_TOTAL 32
    while(1)
    {
        asm("clrwdt");
        handle_uart();
        handle_ir();

        if(ADIF)
        {
            uint16_t adc = ADRESH << 8;
            adc |= ADRESL;
            ADIF = 0;
            GO = 1;
            analog_accum += adc;
            analog_total++;
            if(analog_total >= ANALOG_TOTAL)
            {
// scale analog to 8 bits
                analog_accum /= ANALOG_TOTAL;
                analog_accum /= 4;
                analog_result = analog_accum;
                have_analog = 1;
                analog_accum = 0;
                analog_total = 0;
            }
        }

// send a code            
        if(TMR0IF)
        {
            TMR0IF = 0;
            TMR0 = TIMER0_VALUE;
//LED_LAT = !LED_LAT;
            
            if(have_analog && ir_size == 0)
            {
                have_analog = 0;

//if(uart_size == 0)
//{
//print_number(analog_accum);
//                 print_number(RA0); // SET
//                 print_number(RA1); // PRESET 2
//                 print_number(RA2); // UP
//                 print_number(RA4); // PRESET 1
//                 print_number(RA5); // STOP
//                 print_number(RB4); // PRESET 4
//                 print_number(RB5); // DOWN
//                 print_number(RB6); // PRESET 3
//print_text("\n");
//}



// Convert only 1 button to a code
                uint8_t button = 0;
                if(!RA0) button = 0x01; // UNUSED
                else
                if(!RA1) button = 0x02; // PRESET2
                else
                if(!RA2) button = 0x04; // UP
                else
                if(!RA4) button = 0x08; // PRESET1
                else
                if(!RA5) button = 0x10; // SET
                else
                if(!RB4) button = 0x20; // PRESET4
                else
                if(!RB5) button = 0x40; // DOWN
                else
                if(!RB6) button = 0x80; // PRESET3


// sync code + extra 0xff to align the start bit
                send_ir(0xff);
                send_ir(0xff);
                send_ir(0x2d);
                send_ir(0xd4);
// data
                send_ir(id ^ salt[0]);
                send_ir(id ^ salt[1]);
                send_ir(id ^ salt[2]);
                send_ir(id ^ salt[3]);
                send_ir(analog_result ^ salt[4]);
                send_ir(analog_result ^ salt[5]);
                send_ir(analog_result ^ salt[6]);
                send_ir(analog_result ^ salt[7]);
                send_ir(button ^ salt[8]);
                send_ir(button ^ salt[9]);
                send_ir(button ^ salt[10]);
                send_ir(button ^ salt[11]);
            }
        }
    }
}

// stop bit
void uart_stop()
{
    DEBUG_LAT = 1;
    uart_state = uart_start;
    uart_ready = 1;
}

// data bits
void uart_data()
{
    if((uart_out & 0x01))
        DEBUG_LAT = 1;
    else
        DEBUG_LAT = 0;
    uart_counter++;
    if(uart_counter < 8)
        uart_out >>= 1;
    else
        uart_state = uart_stop;
}

// start bit
void uart_start()
{
    if(!uart_ready)
    {
        DEBUG_LAT = 0;
        uart_counter = 0;
        uart_state = uart_data;
    }
}


void interrupt isr()
{
    if(TMR1IF)
    {
        TMR1IF = 0;
        TMR1 = TIMER1_VALUE;
        uart_state();
    }
}



















